/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ExamCell;

import java.awt.Dimension;
import java.awt.HeadlessException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Tanay Thakar
 */
public class MainMenu extends javax.swing.JFrame {

    /**
     * Creates new form MainMenu
     */
    String currentDir=System.getProperty("user.dir");
    Connection conn = null;
    ResultSet rs,rs1,rs2,rs3,rs4 = null;
    PreparedStatement pst,pst1,pst2,pst3,pst4 = null;
    Statement stmt =null;
   
    int rowCounted;
    
    public MainMenu() {
        initComponents();
        currentDate();
        //conn = db.connect();
    }
    
    public void fillUIDList()
    {
        String sql = "Select UID from Faculty_Details";
        try
        {
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            while(rs.next())
            {
                UIDList.add(rs.getString(1));                
            }
            Collections.shuffle(UIDList);
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
        finally
        {
            try
            {   
                rs.close();
                pst.close();
            }
            catch(SQLException ex)
            {
                JOptionPane.showMessageDialog(null,ex);
            }
        }
    }
    
    public void fillSubject_CodeList()
    {
        String sql = "Select Subject_Code from Exam_TimeTable where not exists (Select * from Duty_Details where Exam_TimeTable.Subject_Code = Duty_Details.Subject_Code)";
        try
        {
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            while(rs.next())
            {
                Subject_CodeList.add(rs.getString(1));                
            }
            Collections.shuffle(Subject_CodeList);
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
        finally
        {
            try
            {   
                rs.close();
                pst.close();
            }
            catch(SQLException ex)
            {
                JOptionPane.showMessageDialog(null,ex);
            }
        }
    }
    
    public void currentDate()
    {
        Date date = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("dd MMMM yyyy");
        String strDate = formatter.format(date); 
        jMenu1.setText(strDate);
        
        
        DateFormat dateFormat = new SimpleDateFormat("hh : mm  aa");
    	String timeString = dateFormat.format(new Date()).toString();
        jMenu2.setText(timeString);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Automated Examination Manager");
        setResizable(false);
        getContentPane().setLayout(null);

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Main Menu/faculty-icon_80.png"))); // NOI18N
        jButton1.setText("Faculty Manager");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(20, 180, 275, 100);

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Main Menu/schedule-icon_80.png"))); // NOI18N
        jButton2.setText("Exam Schedule");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(20, 300, 275, 100);

        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Main Menu/class-icon_80.png"))); // NOI18N
        jButton3.setText("Block Manager");
        jButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(20, 420, 275, 100);

        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Main Menu/sheet-icon-new.png"))); // NOI18N
        jButton4.setText("Sheet Generator");
        jButton4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(330, 540, 275, 100);

        jButton5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Main Menu/job_application.png"))); // NOI18N
        jButton5.setText("Duty Allotment");
        jButton5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(20, 540, 275, 100);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Backgrounds/slide-22-1080x675.jpg"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 1080, 670);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu5.setText("Clear Database");

        jMenuItem4.setText("Clear Employee Duty Details");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem4);

        jMenuItem6.setText("Clear Examination Details");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem6);

        jMenuItem5.setText("Clear Employee Details");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem5);

        jMenuItem7.setText("Clear Block Details");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem7);

        jMenuBar1.add(jMenu5);

        jMenu4.setText("Backup Data");

        jMenuItem3.setText("Backup Database");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuItem8.setText("Restore Backup");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem8);

        jMenuBar1.add(jMenu4);

        jMenu6.setText("Exam Duty");

        jMenuItem9.setText("Automatically Allot Duties");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem9);

        jMenuBar1.add(jMenu6);

        jMenu3.setText("About");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        jMenuItem2.setText("Version");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        setSize(new java.awt.Dimension(1082, 715));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        About a = new About();
        a.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        About a = new About();
        a.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        SheetMenu sm = new SheetMenu();
        sm.setVisible(true);
     
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        FacultyManager fm = new FacultyManager();
        fm.setVisible(true);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ExamSchedule es = new ExamSchedule();
        es.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        BlockManager bm = new BlockManager();
        bm.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        conn = db.connect();
        
        currentDir = currentDir.replace("\\","/");
        File sourceFile = new File(currentDir+"/Database/ExamCellDB.sqlite");
        String destLoc;
        File desFile;
        //String dbFile = "/Database/ExamCellDB.sqlite";
        JFileChooser j = new JFileChooser(); 

            j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
            int r = j.showSaveDialog(null); 
  
            if (r == JFileChooser.APPROVE_OPTION) { 
                destLoc = j.getSelectedFile().getAbsolutePath();
                destLoc = destLoc.replace("\\","/");
                desFile = new File(destLoc+"/ExamCellDB.sqlite");
                Path abc=sourceFile.toPath();
                Path xyz=desFile.toPath();
                
                try {
                    Files.copy(abc,xyz,StandardCopyOption.REPLACE_EXISTING);
                    JOptionPane.showMessageDialog(null,"Database Backup Successfully Completed\n\nLocation : "+xyz);
                }
                catch(IOException io){
                    JOptionPane.showMessageDialog(null,"Error Backing-Up Database..!!\n\nFile Not Found"+destLoc);
                }
            } 
            else
                JOptionPane.showMessageDialog(null,"Unexpected Error encountered while Backing-Up Database..!!");   
        try {
            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        DutyAllotment da = new DutyAllotment();
        da.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        
        conn = db.connect();
        
        ImageIcon icon = new ImageIcon("src/Icons/Main Menu/lock icon.png");
        
        JPanel panel = new JPanel();

        
        JLabel l1 = new JLabel("Please Enter Master Password :");
        JPasswordField pass = new JPasswordField(15);
        
        panel.add(l1);
        panel.add(pass);
        
        Object[] options1 = { "Submit", "Change Password","Cancel" };

        int result = JOptionPane.showOptionDialog(null, panel, "Enter a Number",JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,icon, options1, null);
        
        if(result == 0)
        {
            try
            {
                String sql = "Select * from ExamCell where User = 'master'";
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                
                String dat1 = rs.getString("Password");
                
                if(pass.getText().equals(dat1))
                {
                    int x = JOptionPane.showConfirmDialog(null,"Are You Sure you want to Clear All Employee Duty Records ?", "Clear Employee Duty Records", JOptionPane.YES_NO_OPTION);
                    String sql1 = "Delete from Duty_Details";
                    if(x==0)
                    {
                        try
                        {
                            pst = conn.prepareStatement(sql1);
                            pst.executeUpdate();
                
                            JOptionPane.showMessageDialog(null,"Employee Duty Records Deleted Successfully ");
                        }
                        catch(SQLException e)
                        {
                            JOptionPane.showMessageDialog(null,e);
                        }
                        finally
                        {
                            try 
                            {
                                pst.close();
                            } 
                            catch (SQLException ex) 
                            {
                                JOptionPane.showMessageDialog(null,ex);
                            }
                        }
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Incorrect Master Paswword .. !", "Incorrect Password",JOptionPane.ERROR_MESSAGE);
                }
            }
            catch(HeadlessException | SQLException e)
            {
                JOptionPane.showMessageDialog(null,e);
            }
            finally
            {
                try 
                {
                    rs.close();
                    pst.close();
                } 
                catch (SQLException ex) 
                {
                    JOptionPane.showMessageDialog(null,ex);
                }
            }
        }
        else if (result == 1)
        {
            ChangePassword cp =new ChangePassword();
            cp.setVisible(true);
        }
        
        try {
            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,ex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        
        conn = db.connect();
        
        ImageIcon icon = new ImageIcon("src/Icons/Main Menu/lock icon.png");
        
        JPanel panel = new JPanel();

        
        JLabel l1 = new JLabel("Please Enter Master Password :");
        JPasswordField pass = new JPasswordField(15);
        
        panel.add(l1);
        panel.add(pass);
        
        Object[] options1 = { "Submit", "Change Password","Cancel" };

        int result = JOptionPane.showOptionDialog(null, panel, "Enter a Number",JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,icon, options1, null);
        
        if(result == 0)
        {
            try
            {
                String sql = "Select * from ExamCell where User = 'master'";
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                
                String dat1 = rs.getString("Password");
                
                if(pass.getText().equals(dat1))
                {
                    int x = JOptionPane.showConfirmDialog(null,"Are You Sure you want to Clear All Examination Records ?", "Clear Examination Records", JOptionPane.YES_NO_OPTION);
                    String sql1 = "Delete from Exam_TimeTable";
                    if(x==0)
                    {
                        try
                        {
                            pst = conn.prepareStatement(sql1);
                            pst.executeUpdate();
                
                            JOptionPane.showMessageDialog(null,"Examination Records Deleted Successfully ");
                        }
                        catch(SQLException e)
                        {
                            JOptionPane.showMessageDialog(null,e);
                        }
                        finally
                        {
                            try {
                                pst.close();
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null,ex);
                            }
                        }
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Incorrect Master Paswword .. !", "Incorrect Password",JOptionPane.ERROR_MESSAGE);
                }
            }
            catch(HeadlessException | SQLException e)
            {
                JOptionPane.showMessageDialog(null,e);
            }
            finally
            {
                try 
                {
                    rs.close();
                    pst.close();
                } 
                catch (SQLException ex) 
                {
                    JOptionPane.showMessageDialog(null,ex);
                }
            }
        }
        else if (result == 1)
        {
            ChangePassword cp =new ChangePassword();
            cp.setVisible(true);
        }    
        
        try {
            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        
        conn = db.connect();
        
        ImageIcon icon = new ImageIcon("src/Icons/Main Menu/lock icon.png");
        
        JPanel panel = new JPanel();

        JLabel l1 = new JLabel("Please Enter Master Password :");
        JPasswordField pass = new JPasswordField(15);
        
        panel.add(l1);
        panel.add(pass);
        
        Object[] options1 = { "Submit", "Change Password","Cancel" };

        int result = JOptionPane.showOptionDialog(null, panel, "Enter a Number",JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,icon, options1, null);
        
        if(result == 0)
        {
            try
            {
                String sql = "Select * from ExamCell where User = 'master'";
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                
                String dat1 = rs.getString("Password");
                
                if(pass.getText().equals(dat1))
                {
                    int x = JOptionPane.showConfirmDialog(null,"Are You Sure you want to Clear All Faculty Records ?", "Clear Faculty Records", JOptionPane.YES_NO_OPTION);
                    String sql1 = "Delete from Faculty_Details";
                    if(x==0)
                    {
                        try
                        {
                            pst = conn.prepareStatement(sql1);
                            pst.executeUpdate();
                
                            JOptionPane.showMessageDialog(null,"Faculty Records Deleted Successfully ");
                        }
                        catch(SQLException e)
                        {
                            JOptionPane.showMessageDialog(null,e);
                        }
                        finally
                        {
                            try {
                                pst.close();
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null,ex);
                            }
                        }
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Incorrect Master Paswword .. !", "Incorrect Password",JOptionPane.ERROR_MESSAGE);
                }
            }
            catch(HeadlessException | SQLException e)
            {
                JOptionPane.showMessageDialog(null,e);
            }
            finally
            {
                try 
                {
                    rs.close();
                    pst.close();
                } 
                catch (SQLException ex) 
                {
                    JOptionPane.showMessageDialog(null,ex);
                }
            }
        }
        else if (result == 1)
        {
            ChangePassword cp =new ChangePassword();
            cp.setVisible(true);
        }
        
        try {
            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,ex);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed

        conn = db.connect();
        
        ImageIcon icon = new ImageIcon("src/Icons/Main Menu/lock icon.png");
        
        JPanel panel = new JPanel();

        
        JLabel l1 = new JLabel("Please Enter Master Password :");
        JPasswordField pass = new JPasswordField(15);
        
        panel.add(l1);
        panel.add(pass);
        
        Object[] options1 = { "Submit", "Change Password","Cancel" };

        int result = JOptionPane.showOptionDialog(null, panel, "Enter a Number",JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,icon, options1, null);
        
        if(result == 0)
        {
            try
            {
                String sql = "Select * from ExamCell where User = 'master'";
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                
                String dat1 = rs.getString("Password");
                
                if(pass.getText().equals(dat1))
                {
                    int x = JOptionPane.showConfirmDialog(null,"Are You Sure you want to Clear All Block Records ?", "Clear Block Records", JOptionPane.YES_NO_OPTION);
                    String sql1 = "Delete from Block_Details";
                    if(x==0)
                    {
                        try
                        {
                            pst = conn.prepareStatement(sql1);
                            pst.executeUpdate();
                
                            JOptionPane.showMessageDialog(null,"Block Records Deleted Successfully ");
                        }
                        catch(SQLException e)
                        {
                            JOptionPane.showMessageDialog(null,e);
                        }
                        finally
                        {
                            try {
                                pst.close();
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null,ex);
                            }
                        }
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Incorrect Master Paswword .. !", "Incorrect Password",JOptionPane.ERROR_MESSAGE);
                }
            }
            catch(HeadlessException | SQLException e)
            {
                JOptionPane.showMessageDialog(null,e);
            }
            finally
            {
                try 
                {
                    rs.close();
                    pst.close();
                } 
                catch (SQLException ex) 
                {
                    JOptionPane.showMessageDialog(null,ex);
                }
            }
        }
        else if (result == 1)
        {
            ChangePassword cp =new ChangePassword();
            cp.setVisible(true);
        }
        
        try {
            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        
        File srcFile,destFile;
        Path src,dest;
        
        JFileChooser j = new JFileChooser(); 
        j.setAcceptAllFileFilterUsed(false); 
        j.setDialogTitle("Select Database File to Restore Backup"); 
        FileNameExtensionFilter restrict = new FileNameExtensionFilter(".sqlite", "sqlite"); 
        j.addChoosableFileFilter(restrict); 
        int r = j.showOpenDialog(null); 
        
        if (r == JFileChooser.APPROVE_OPTION) 
        {
            srcFile= new File(j.getSelectedFile().getAbsolutePath());
            destFile = new File(currentDir+"/Database/ExamCellDB.sqlite");
            src = srcFile.toPath();
            dest = destFile.toPath();
            
            try {
                Files.deleteIfExists(dest);
                Files.copy(src,dest,StandardCopyOption.REPLACE_EXISTING);
                JOptionPane.showMessageDialog(null,"Database Backup Successfully Completed\n\nLocation : "+dest);
            }
            catch(IOException io)
            {
                JOptionPane.showMessageDialog(null,io);//"Error Restoring Backup Database..!!\n\nFile Not Found"+src
            }
        }
        else
            JOptionPane.showMessageDialog(null,"Unexpected Error encountered while Restoring Backup Database..!!");
        
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        conn = db.connect();
        fillUIDList();
        fillSubject_CodeList();
        
        int UIDLSize = UIDList.size();
        int SCLSize = Subject_CodeList.size();
        int loopMax;
        
        String Query1,Query2,Query3;
        
        if(SCLSize > UIDLSize)
            loopMax = UIDLSize;
        else if(SCLSize == UIDLSize)
            loopMax = UIDLSize;
        else 
            loopMax = SCLSize;
        
        
        if(SCLSize == 0)
        {
            JOptionPane.showMessageDialog(null,"No Vacant Duty Slots left... !!!");
        }
        else
        {
            try
            {
                for(int i = 0 ; i <= loopMax ; i++)
                {
                    System.out.println("UID : "+UIDList.get(i));
                    System.out.println("Subject Code : "+Subject_CodeList.get(i));
                    
                    Query1 = "Select Name from Faculty_Details where UID = '"+UIDList.get(i)+"'";
                    pst = conn.prepareStatement(Query1);
                    rs = pst.executeQuery();
                
                    Query2 = "Select Date, Day, Slot, Time from Exam_TimeTable where Subject_Code = '"+Subject_CodeList.get(i)+"'";
                    pst1 = conn.prepareStatement(Query2);
                    rs1 = pst1.executeQuery();
                    
                    String query = "select count(Duty_Slot) from Duty_Details where UID = '"+UIDList.get(i)+"' and Duty_Date = '"+rs1.getString("Date")+"' and Duty_Slot='"+rs1.getString("Slot")+"'";
                    pst2=conn.prepareStatement(query);
                    rs2 = pst2.executeQuery();
            
                    String RowCounts = rs2.getString(1);
                    int Counted = Integer.parseInt(RowCounts);
            
                    if(Counted>0)
                    {
                        i++;
                    }
                    else
                    {
                        String sql = "select count(Duty_Slot) from Duty_Details where UID = '"+UIDList.get(i)+"' and Duty_Date = '"+rs1.getString("Date")+"'";
                        pst3=conn.prepareStatement(sql);
                        rs3 = pst3.executeQuery();
            
                        String rowCount = rs3.getString(1);
            
                        rowCounted = Integer.parseInt(rowCount);
                
                        if(rowCounted>1)
                        {
                            i++;
                        }
                        else
                        {
                            Query3 = "Insert into Duty_Details values (?,?,?,?,?,?,?)";
                            pst4 = conn.prepareStatement(Query3);
                            
                            pst4.setString(1, UIDList.get(i));
                            pst4.setString(2, rs.getString(1));
                            pst4.setString(3, rs1.getString("Date"));
                            pst4.setString(4, rs1.getString("Day"));
                            pst4.setString(5, rs1.getString("Slot"));
                            pst4.setString(6, rs1.getString("Time"));
                            pst4.setString(7, Subject_CodeList.get(i));
                    
                            pst4.execute();
                        }
                    }
                }
                JOptionPane.showMessageDialog(null, "Exam Duties Automatically Alloted to Employees");
            }
            catch(IndexOutOfBoundsException ex)
            {
                JOptionPane.showMessageDialog(null, "Index Out of Bounds....\n\nExam Duties Automatically Alloted to Employees");
            }
            catch(NumberFormatException | SQLException e)
            {
                JOptionPane.showMessageDialog(null,e,"ERROR",JOptionPane.ERROR_MESSAGE);
            }
            finally
            {
                try 
                {
                    rs.close();
                    rs1.close();
                    rs2.close();
                    rs3.close();
                    //rs4.close();
                    
                    pst.close();
                    pst1.close();
                    pst2.close();
                    pst3.close();
                    pst4.close();
                } 
                catch (SQLException ex) 
                {
                    JOptionPane.showMessageDialog(null,ex);
                }
            }
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    List<String> UIDList = new ArrayList<>();
    List<String> Subject_CodeList = new ArrayList<>();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    // End of variables declaration//GEN-END:variables
}
